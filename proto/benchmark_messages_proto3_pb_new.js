/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('../google-protobuf-new');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.benchmarks.proto3.GoogleMessage1', null, global);
goog.exportSymbol('proto.benchmarks.proto3.GoogleMessage1SubMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.benchmarks.proto3.GoogleMessage1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.benchmarks.proto3.GoogleMessage1.repeatedFields_, null);
};
goog.inherits(proto.benchmarks.proto3.GoogleMessage1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.benchmarks.proto3.GoogleMessage1.displayName = 'proto.benchmarks.proto3.GoogleMessage1';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.benchmarks.proto3.GoogleMessage1.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.toObject = function(opt_includeInstance) {
  return proto.benchmarks.proto3.GoogleMessage1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.benchmarks.proto3.GoogleMessage1} msg The msg instance to transform.
 * @return {!Object}
 */
proto.benchmarks.proto3.GoogleMessage1.toObject = function(includeInstance, msg) {
  var f, obj = {
    field1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    field9: jspb.Message.getFieldWithDefault(msg, 9, ""),
    field18: jspb.Message.getFieldWithDefault(msg, 18, ""),
    field80: jspb.Message.getFieldWithDefault(msg, 80, false),
    field81: jspb.Message.getFieldWithDefault(msg, 81, false),
    field2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    field3: jspb.Message.getFieldWithDefault(msg, 3, 0),
    field280: jspb.Message.getFieldWithDefault(msg, 280, 0),
    field6: jspb.Message.getFieldWithDefault(msg, 6, 0),
    field22: jspb.Message.getFieldWithDefault(msg, 22, 0),
    field4: jspb.Message.getFieldWithDefault(msg, 4, ""),
    field5List: jspb.Message.getField(msg, 5),
    field59: jspb.Message.getFieldWithDefault(msg, 59, false),
    field7: jspb.Message.getFieldWithDefault(msg, 7, ""),
    field16: jspb.Message.getFieldWithDefault(msg, 16, 0),
    field130: jspb.Message.getFieldWithDefault(msg, 130, 0),
    field12: jspb.Message.getFieldWithDefault(msg, 12, false),
    field17: jspb.Message.getFieldWithDefault(msg, 17, false),
    field13: jspb.Message.getFieldWithDefault(msg, 13, false),
    field14: jspb.Message.getFieldWithDefault(msg, 14, false),
    field104: jspb.Message.getFieldWithDefault(msg, 104, 0),
    field100: jspb.Message.getFieldWithDefault(msg, 100, 0),
    field101: jspb.Message.getFieldWithDefault(msg, 101, 0),
    field102: jspb.Message.getFieldWithDefault(msg, 102, ""),
    field103: jspb.Message.getFieldWithDefault(msg, 103, ""),
    field29: jspb.Message.getFieldWithDefault(msg, 29, 0),
    field30: jspb.Message.getFieldWithDefault(msg, 30, false),
    field60: jspb.Message.getFieldWithDefault(msg, 60, 0),
    field271: jspb.Message.getFieldWithDefault(msg, 271, 0),
    field272: jspb.Message.getFieldWithDefault(msg, 272, 0),
    field150: jspb.Message.getFieldWithDefault(msg, 150, 0),
    field23: jspb.Message.getFieldWithDefault(msg, 23, 0),
    field24: jspb.Message.getFieldWithDefault(msg, 24, false),
    field25: jspb.Message.getFieldWithDefault(msg, 25, 0),
    field15: (f = msg.getField15()) && proto.benchmarks.proto3.GoogleMessage1SubMessage.toObject(includeInstance, f),
    field78: jspb.Message.getFieldWithDefault(msg, 78, false),
    field67: jspb.Message.getFieldWithDefault(msg, 67, 0),
    field68: jspb.Message.getFieldWithDefault(msg, 68, 0),
    field128: jspb.Message.getFieldWithDefault(msg, 128, 0),
    field129: jspb.Message.getFieldWithDefault(msg, 129, ""),
    field131: jspb.Message.getFieldWithDefault(msg, 131, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.benchmarks.proto3.GoogleMessage1}
 */
proto.benchmarks.proto3.GoogleMessage1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.benchmarks.proto3.GoogleMessage1;
  return proto.benchmarks.proto3.GoogleMessage1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.benchmarks.proto3.GoogleMessage1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.benchmarks.proto3.GoogleMessage1}
 */
proto.benchmarks.proto3.GoogleMessage1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField1(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setField9(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setField18(value);
      break;
    case 80:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField80(value);
      break;
    case 81:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField81(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField3(value);
      break;
    case 280:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField280(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField6(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setField22(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setField4(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFixed64());
      msg.setField5List(value);
      break;
    case 59:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField59(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setField7(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField16(value);
      break;
    case 130:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField130(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField12(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField17(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField13(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField14(value);
      break;
    case 104:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField104(value);
      break;
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField100(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField101(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readString());
      msg.setField102(value);
      break;
    case 103:
      var value = /** @type {string} */ (reader.readString());
      msg.setField103(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField29(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField30(value);
      break;
    case 60:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField60(value);
      break;
    case 271:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField271(value);
      break;
    case 272:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField272(value);
      break;
    case 150:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField150(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField23(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField24(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField25(value);
      break;
    case 15:
      var value = new proto.benchmarks.proto3.GoogleMessage1SubMessage;
      reader.readMessage(value,proto.benchmarks.proto3.GoogleMessage1SubMessage.deserializeBinaryFromReader);
      msg.setField15(value);
      break;
    case 78:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField78(value);
      break;
    case 67:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField67(value);
      break;
    case 68:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField68(value);
      break;
    case 128:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField128(value);
      break;
    case 129:
      var value = /** @type {string} */ (reader.readString());
      msg.setField129(value);
      break;
    case 131:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField131(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.benchmarks.proto3.GoogleMessage1} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.benchmarks.proto3.GoogleMessage1.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getField1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getField9();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getField18();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = this.getField80();
  if (f) {
    writer.writeBool(
      80,
      f
    );
  }
  f = this.getField81();
  if (f) {
    writer.writeBool(
      81,
      f
    );
  }
  f = this.getField2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getField3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getField280();
  if (f !== 0) {
    writer.writeInt32(
      280,
      f
    );
  }
  f = this.getField6();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getField22();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = this.getField4();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getField5List();
  if (f.length > 0) {
    writer.writePackedFixed64(
      5,
      f
    );
  }
  f = this.getField59();
  if (f) {
    writer.writeBool(
      59,
      f
    );
  }
  f = this.getField7();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getField16();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = this.getField130();
  if (f !== 0) {
    writer.writeInt32(
      130,
      f
    );
  }
  f = this.getField12();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getField17();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = this.getField13();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = this.getField14();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = this.getField104();
  if (f !== 0) {
    writer.writeInt32(
      104,
      f
    );
  }
  f = this.getField100();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = this.getField101();
  if (f !== 0) {
    writer.writeInt32(
      101,
      f
    );
  }
  f = this.getField102();
  if (f.length > 0) {
    writer.writeString(
      102,
      f
    );
  }
  f = this.getField103();
  if (f.length > 0) {
    writer.writeString(
      103,
      f
    );
  }
  f = this.getField29();
  if (f !== 0) {
    writer.writeInt32(
      29,
      f
    );
  }
  f = this.getField30();
  if (f) {
    writer.writeBool(
      30,
      f
    );
  }
  f = this.getField60();
  if (f !== 0) {
    writer.writeInt32(
      60,
      f
    );
  }
  f = this.getField271();
  if (f !== 0) {
    writer.writeInt32(
      271,
      f
    );
  }
  f = this.getField272();
  if (f !== 0) {
    writer.writeInt32(
      272,
      f
    );
  }
  f = this.getField150();
  if (f !== 0) {
    writer.writeInt32(
      150,
      f
    );
  }
  f = this.getField23();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = this.getField24();
  if (f) {
    writer.writeBool(
      24,
      f
    );
  }
  f = this.getField25();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = this.getField15();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.benchmarks.proto3.GoogleMessage1SubMessage.serializeBinaryToWriter
    );
  }
  f = this.getField78();
  if (f) {
    writer.writeBool(
      78,
      f
    );
  }
  f = this.getField67();
  if (f !== 0) {
    writer.writeInt32(
      67,
      f
    );
  }
  f = this.getField68();
  if (f !== 0) {
    writer.writeInt32(
      68,
      f
    );
  }
  f = this.getField128();
  if (f !== 0) {
    writer.writeInt32(
      128,
      f
    );
  }
  f = this.getField129();
  if (f.length > 0) {
    writer.writeString(
      129,
      f
    );
  }
  f = this.getField131();
  if (f !== 0) {
    writer.writeInt32(
      131,
      f
    );
  }
};


/**
 * optional string field1 = 1;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string field9 = 9;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField9 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField9 = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string field18 = 18;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField18 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField18 = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional bool field80 = 80;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField80 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 80, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField80 = function(value) {
  jspb.Message.setField(this, 80, value);
};


/**
 * optional bool field81 = 81;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField81 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 81, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField81 = function(value) {
  jspb.Message.setField(this, 81, value);
};


/**
 * optional int32 field2 = 2;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 field3 = 3;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField3 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 field280 = 280;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField280 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 280, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField280 = function(value) {
  jspb.Message.setField(this, 280, value);
};


/**
 * optional int32 field6 = 6;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField6 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 field22 = 22;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField22 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField22 = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional string field4 = 4;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField4 = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated fixed64 field5 = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField5List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<number>} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField5List = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.addField5 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.benchmarks.proto3.GoogleMessage1.prototype.clearField5List = function() {
  this.setField5List([]);
};


/**
 * optional bool field59 = 59;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField59 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 59, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField59 = function(value) {
  jspb.Message.setField(this, 59, value);
};


/**
 * optional string field7 = 7;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField7 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField7 = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 field16 = 16;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField16 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField16 = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int32 field130 = 130;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField130 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 130, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField130 = function(value) {
  jspb.Message.setField(this, 130, value);
};


/**
 * optional bool field12 = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField12 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField12 = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bool field17 = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField17 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField17 = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional bool field13 = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField13 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField13 = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bool field14 = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField14 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField14 = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional int32 field104 = 104;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField104 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 104, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField104 = function(value) {
  jspb.Message.setField(this, 104, value);
};


/**
 * optional int32 field100 = 100;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField100 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField100 = function(value) {
  jspb.Message.setField(this, 100, value);
};


/**
 * optional int32 field101 = 101;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField101 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField101 = function(value) {
  jspb.Message.setField(this, 101, value);
};


/**
 * optional string field102 = 102;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField102 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField102 = function(value) {
  jspb.Message.setField(this, 102, value);
};


/**
 * optional string field103 = 103;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField103 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 103, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField103 = function(value) {
  jspb.Message.setField(this, 103, value);
};


/**
 * optional int32 field29 = 29;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField29 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField29 = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * optional bool field30 = 30;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField30 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 30, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField30 = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * optional int32 field60 = 60;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField60 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField60 = function(value) {
  jspb.Message.setField(this, 60, value);
};


/**
 * optional int32 field271 = 271;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField271 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 271, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField271 = function(value) {
  jspb.Message.setField(this, 271, value);
};


/**
 * optional int32 field272 = 272;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField272 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 272, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField272 = function(value) {
  jspb.Message.setField(this, 272, value);
};


/**
 * optional int32 field150 = 150;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField150 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 150, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField150 = function(value) {
  jspb.Message.setField(this, 150, value);
};


/**
 * optional int32 field23 = 23;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField23 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField23 = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional bool field24 = 24;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField24 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 24, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField24 = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional int32 field25 = 25;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField25 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField25 = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional GoogleMessage1SubMessage field15 = 15;
 * @return {?proto.benchmarks.proto3.GoogleMessage1SubMessage}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField15 = function() {
  return /** @type{?proto.benchmarks.proto3.GoogleMessage1SubMessage} */ (
    jspb.Message.getWrapperField(this, proto.benchmarks.proto3.GoogleMessage1SubMessage, 15));
};


/** @param {?proto.benchmarks.proto3.GoogleMessage1SubMessage|undefined} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField15 = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.benchmarks.proto3.GoogleMessage1.prototype.clearField15 = function() {
  this.setField15(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.hasField15 = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool field78 = 78;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField78 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 78, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField78 = function(value) {
  jspb.Message.setField(this, 78, value);
};


/**
 * optional int32 field67 = 67;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField67 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 67, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField67 = function(value) {
  jspb.Message.setField(this, 67, value);
};


/**
 * optional int32 field68 = 68;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField68 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 68, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField68 = function(value) {
  jspb.Message.setField(this, 68, value);
};


/**
 * optional int32 field128 = 128;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField128 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 128, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField128 = function(value) {
  jspb.Message.setField(this, 128, value);
};


/**
 * optional string field129 = 129;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField129 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 129, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField129 = function(value) {
  jspb.Message.setField(this, 129, value);
};


/**
 * optional int32 field131 = 131;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1.prototype.getField131 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 131, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1.prototype.setField131 = function(value) {
  jspb.Message.setField(this, 131, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.benchmarks.proto3.GoogleMessage1SubMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.benchmarks.proto3.GoogleMessage1SubMessage.displayName = 'proto.benchmarks.proto3.GoogleMessage1SubMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.benchmarks.proto3.GoogleMessage1SubMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.benchmarks.proto3.GoogleMessage1SubMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    field1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    field2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    field3: jspb.Message.getFieldWithDefault(msg, 3, 0),
    field15: jspb.Message.getFieldWithDefault(msg, 15, ""),
    field12: jspb.Message.getFieldWithDefault(msg, 12, false),
    field13: jspb.Message.getFieldWithDefault(msg, 13, 0),
    field14: jspb.Message.getFieldWithDefault(msg, 14, 0),
    field16: jspb.Message.getFieldWithDefault(msg, 16, 0),
    field19: jspb.Message.getFieldWithDefault(msg, 19, 0),
    field20: jspb.Message.getFieldWithDefault(msg, 20, false),
    field28: jspb.Message.getFieldWithDefault(msg, 28, false),
    field21: jspb.Message.getFieldWithDefault(msg, 21, 0),
    field22: jspb.Message.getFieldWithDefault(msg, 22, 0),
    field23: jspb.Message.getFieldWithDefault(msg, 23, false),
    field206: jspb.Message.getFieldWithDefault(msg, 206, false),
    field203: jspb.Message.getFieldWithDefault(msg, 203, 0),
    field204: jspb.Message.getFieldWithDefault(msg, 204, 0),
    field205: jspb.Message.getFieldWithDefault(msg, 205, ""),
    field207: jspb.Message.getFieldWithDefault(msg, 207, 0),
    field300: jspb.Message.getFieldWithDefault(msg, 300, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.benchmarks.proto3.GoogleMessage1SubMessage}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.benchmarks.proto3.GoogleMessage1SubMessage;
  return proto.benchmarks.proto3.GoogleMessage1SubMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.benchmarks.proto3.GoogleMessage1SubMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.benchmarks.proto3.GoogleMessage1SubMessage}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField3(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setField15(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField12(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setField13(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setField14(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField16(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField19(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField20(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField28(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setField21(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField22(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField23(value);
      break;
    case 206:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField206(value);
      break;
    case 203:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setField203(value);
      break;
    case 204:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setField204(value);
      break;
    case 205:
      var value = /** @type {string} */ (reader.readString());
      msg.setField205(value);
      break;
    case 207:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setField207(value);
      break;
    case 300:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setField300(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.benchmarks.proto3.GoogleMessage1SubMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getField1();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getField2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getField3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getField15();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getField12();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getField13();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = this.getField14();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = this.getField16();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = this.getField19();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = this.getField20();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = this.getField28();
  if (f) {
    writer.writeBool(
      28,
      f
    );
  }
  f = this.getField21();
  if (f !== 0) {
    writer.writeFixed64(
      21,
      f
    );
  }
  f = this.getField22();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = this.getField23();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = this.getField206();
  if (f) {
    writer.writeBool(
      206,
      f
    );
  }
  f = this.getField203();
  if (f !== 0) {
    writer.writeFixed32(
      203,
      f
    );
  }
  f = this.getField204();
  if (f !== 0) {
    writer.writeInt32(
      204,
      f
    );
  }
  f = this.getField205();
  if (f.length > 0) {
    writer.writeString(
      205,
      f
    );
  }
  f = this.getField207();
  if (f !== 0) {
    writer.writeUint64(
      207,
      f
    );
  }
  f = this.getField300();
  if (f !== 0) {
    writer.writeUint64(
      300,
      f
    );
  }
};


/**
 * optional int32 field1 = 1;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 field2 = 2;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 field3 = 3;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField3 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string field15 = 15;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField15 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField15 = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional bool field12 = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField12 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField12 = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int64 field13 = 13;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField13 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField13 = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int64 field14 = 14;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField14 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField14 = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional int32 field16 = 16;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField16 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField16 = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int32 field19 = 19;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField19 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField19 = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional bool field20 = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField20 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField20 = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional bool field28 = 28;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField28 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 28, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField28 = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional fixed64 field21 = 21;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField21 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField21 = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional int32 field22 = 22;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField22 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField22 = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional bool field23 = 23;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField23 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 23, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField23 = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional bool field206 = 206;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField206 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 206, false));
};


/** @param {boolean} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField206 = function(value) {
  jspb.Message.setField(this, 206, value);
};


/**
 * optional fixed32 field203 = 203;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField203 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 203, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField203 = function(value) {
  jspb.Message.setField(this, 203, value);
};


/**
 * optional int32 field204 = 204;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField204 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 204, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField204 = function(value) {
  jspb.Message.setField(this, 204, value);
};


/**
 * optional string field205 = 205;
 * @return {string}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField205 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 205, ""));
};


/** @param {string} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField205 = function(value) {
  jspb.Message.setField(this, 205, value);
};


/**
 * optional uint64 field207 = 207;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField207 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 207, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField207 = function(value) {
  jspb.Message.setField(this, 207, value);
};


/**
 * optional uint64 field300 = 300;
 * @return {number}
 */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.getField300 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 300, 0));
};


/** @param {number} value */
proto.benchmarks.proto3.GoogleMessage1SubMessage.prototype.setField300 = function(value) {
  jspb.Message.setField(this, 300, value);
};


goog.object.extend(exports, proto.benchmarks.proto3);
